{"name":"HIPAcc","tagline":"The Heterogeneous Image Processing Acceleration Framework","body":"### HIPAcc - The Heterogeneous Image Processing Acceleration Framework\r\nHIPAcc allows to design image processing kernels and algorithms in a domain-specific language (DSL). From this high-level description, low-level target code for GPU accelerators is generated using source-to-source translation. As back ends, the framework supports CUDA, OpenCL, and Renderscript.\r\n\r\nHIPAcc allows programmers to develop imaging applications while providing high productivity, flexibility and portability as well as competitive performance: the same algorithm description serves as basis for targeting different GPU accelerators and low-level languages. \r\n\r\n```\r\nclass GaussianFilter : public Kernel<float> {\r\n  private:\r\n    Accessor<float> &Input;\r\n    const int size_x, size_y;\r\n\r\n  public:\r\n    GaussianFilter(IterationSpace<float> &IS, Accessor<float> &Input, const int size_x, const int size_y) :\r\n      Kernel(IS),\r\n      Input(Input),\r\n      size_x(size_x),\r\n      size_y(size_y)\r\n    { addAccessor(&Input); }\r\n\r\n    void kernel() {\r\n      const int ax = size_x >> 1;\r\n      const int ay = size_y >> 1;\r\n      float sum = 0;\r\n\r\n      for (int yf = -ay; yf<=ay; yf++) {\r\n        for (int xf = -ax; xf<=ax; xf++) {\r\n          float gauss_constant = expf(-1.0f*((xf*xf)/(2.0f*size_x*size_x) + (yf*yf)/(2.0f*size_y*size_y)));\r\n          sum += gauss_constant*Input(xf, yf);\r\n        }\r\n      }\r\n      output() = sum;\r\n    }\r\n};\r\n```\r\n\r\n### Authors and Contributors\r\nThe main developers of HIPAcc are Richard Membarth (@richardmembarth) and Oliver Reiche (@oreiche).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}